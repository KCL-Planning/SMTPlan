
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 114
#define YY_END_OF_BUFFER 115
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[741] =
    {   0,
      112,  112,  115,  114,  109,  111,  114,    1,    2,   97,
       95,   96,  105,   98,  112,  104,  114,  101,   67,   99,
      103,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,    3,    4,  108,  109,   75,
      112,  113,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      110,  102,  100,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,   55,  108,  108,  108,  108,  108,  108,
      108,  108,  113,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  108,   54,  108,    0,
        0,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,   59,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,    0,    8,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  108,  108,    0,  107,    0,    0,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,   60,
      108,   78,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   66,
       65,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   19,    0,
        0,    0,  108,  108,  107,    0,    0,  108,  108,  108,
      108,  108,  108,  108,  108,  108,   58,  108,  108,  108,
      108,  108,    0,  108,  108,  108,  108,  108,  108,    0,
       26,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   38,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   27,    0,    0,   86,
       84,  107,   47,    0,  108,  108,   34,   35,  108,   61,
       56,   57,  108,  108,  108,  108,  108,  108,   79,    0,
      108,  108,  108,  108,  108,   88,   36,    0,    0,    0,
        0,    0,    0,    0,   63,    0,   49,    0,    0,    0,
        0,    0,    0,    0,    0,   68,   71,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   69,
        0,    7,    0,    9,    0,  108,    0,  108,  108,  108,

      108,  108,  108,  108,  108,  108,    0,  108,   62,  108,
      108,  108,  108,    0,   25,    0,    0,    0,    0,   40,
        0,    0,    0,    0,    0,    0,    0,   15,    0,    0,
        0,  106,    0,    0,    0,   64,    0,    0,    0,    0,
        0,   37,    0,    0,    0,    0,    0,  108,   46,  108,
       81,   76,  108,  108,   80,  108,   73,   72,   48,  108,
      108,   82,   87,  108,    0,    0,    0,    0,    0,    0,
        0,   53,    0,    0,    6,    0,    0,    0,    0,    0,
        0,    0,    0,   70,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  108,  108,  108,  108,  108,  108,  108,

      108,  108,    0,   43,   22,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   24,    0,   52,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
      108,   94,  108,  108,   85,   83,  108,  108,   77,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   41,    0,   23,    0,    0,    0,
        0,    0,    0,  108,  108,   93,   74,  108,  108,    0,
        0,   21,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   20,    0,    0,    0,    0,
        0,  108,   89,  108,  108,   18,    0,    0,    0,    0,

        0,    0,    0,    0,   51,    0,    0,    0,    0,   42,
        0,    5,    0,    0,    0,   92,  108,  108,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   90,  108,    0,    0,    0,    0,
        0,    0,    0,    0,   50,    0,    0,   17,    0,    0,
        0,    0,   91,    0,    0,    0,    0,    0,   39,    0,
        0,    0,   16,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   28,   45,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   30,   32,    0,    0,    0,    0,    0,   44,

        0,    0,   14,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   29,    0,
        0,    0,    0,    0,    0,    0,   31,    0,   33,    0,
        0,    0,    0,   12,    0,    0,   13,   10,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,   19,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,    1,   47,    1,   30,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   30,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static yyconst flex_int16_t yy_base[744] =
    {   0,
        0,   34,  686, 1783,   72, 1783,   36, 1783, 1783, 1783,
     1783,  654, 1783, 1783,   66,   83,  660,  557, 1783,  550,
     1783,  141,   68,  142,   70,  143,  147,  151,   76,  152,
      177,  158,  178,  183,  210, 1783, 1783,  214,   80, 1783,
       74,  495,  147,  144,  206,  218,  224,   67,  125,   73,
      245,  232,   78,  212,  186,   86,  211,  246,  235,  498,
     1783, 1783, 1783,    0,   78,  279,  288,  290,  283,  294,
      295,  299,  310,  305,  300,  312,  316,  340,   80,  322,
      346,  321,  356,   82,  328,  361,  362,  371,  373,  381,
      386,  387,  479,  291,  309,  209,  313,  340,  351,  361,

      364,  289,  375,  362,  383,  380,  378,  374,  384,  389,
      393,  385,  384,  404,  405,  392,  403,  403,  419,  422,
      411,  411,  436,  422,  423,  434,  456,  223,  455,  484,
      485,  432,  469,  486,  492,  497,  503,  505,  509,  511,
      515,  522,  452,  526,  528,  534,  539,  538,  551,  556,
      558,  568,  570,  581,  583,  585,  475, 1783,  488,  562,
      499,  550,  567,  577,  579,  468,  586,  539,  570,  591,
      588,  595,  588,  582,  602,  597,  589,  589,  604,  606,
      608,  613,  632,  614,  609,  603,  616,  610,  621,  635,
      638,  624,  658,  663,  464,  552,  645,  640,  646,  671,

      678,  686,  687,  688,  700,  705,  706,  711,  717,  647,
      712,  718,  722,  739,  724,  741,  746,  747,  748,  752,
      765,  754,  659,  730,  717,  741,  753,  742,  744,  759,
      746,  766,  755,  760,  753,  757,  766,  767,  762, 1783,
      766,  765,  764,  776,  777,  775,  783,  783,  794,  797,
      806,  812,  813,  800,  812,  822,  805,  810,  823,  810,
      816,  826,  841,  847,  459,  832,  836,  821,  872,  877,
      878,  884,  885,  883,  892,  880,  900,  904,  843,  905,
      906,  917,  841,  922,  931,  926,  932,  933,  943,  848,
      885,  860,  927,  918,  933,  930,  932,  938,  929,  932,

      942, 1783,  947,  453,  934,  946,  957,  951,  953,  960,
      960,  959,  961,  954,  966,  977,  971,  984,  972,  973,
      985,  979,  987,  447,  981,  358, 1783,  988,  984, 1012,
     1013,  345, 1783,  990,  989, 1020, 1022, 1027, 1034, 1039,
     1040, 1046, 1014, 1011, 1050, 1026, 1051, 1052, 1056, 1040,
     1062, 1060, 1051, 1067, 1037, 1069,  335, 1043, 1055, 1056,
     1073, 1050, 1071, 1078, 1783, 1071, 1783, 1077, 1065, 1073,
     1083, 1071, 1076, 1082, 1100, 1783, 1783, 1087, 1086, 1108,
     1124, 1114, 1102, 1119, 1123, 1120, 1108, 1122, 1125, 1783,
     1116, 1783, 1125, 1783, 1117, 1114, 1118,  314, 1150, 1154,

     1120, 1124, 1166, 1145, 1181, 1182, 1138, 1187, 1188, 1146,
     1150, 1198, 1171, 1181, 1783, 1175, 1171, 1176, 1179,  284,
     1176, 1183, 1193, 1199, 1175, 1185, 1200, 1783, 1195,  273,
     1196, 1783, 1202,  237, 1205, 1783, 1204, 1214, 1211, 1202,
     1211, 1783, 1220, 1220, 1220, 1226, 1240, 1233, 1783, 1229,
     1259, 1260, 1240, 1237, 1264, 1236, 1268, 1270, 1783, 1272,
     1245,    0, 1285, 1259, 1262, 1264, 1261, 1267, 1261, 1268,
     1276,  221,  215, 1272, 1783, 1279, 1283, 1272, 1287, 1274,
      211, 1290, 1286, 1783, 1282, 1281, 1297, 1303, 1305, 1307,
     1310, 1310, 1310, 1303, 1312, 1311, 1317, 1327, 1350, 1321,

     1335, 1328, 1320, 1341, 1783, 1325, 1327, 1330, 1329, 1343,
     1353, 1343, 1358, 1358, 1783, 1361, 1783, 1353, 1359, 1353,
     1357, 1368, 1360, 1376, 1381, 1374, 1383, 1369,  205, 1382,
     1389,    0, 1386, 1390, 1299,    0, 1391, 1394,    0, 1382,
     1392, 1388,  163, 1395, 1403, 1396, 1408, 1408, 1405, 1416,
     1417, 1408, 1409, 1419, 1783, 1417, 1783, 1414,  157, 1415,
     1423, 1432, 1427, 1436, 1441,    0,    0, 1428, 1443, 1435,
      153, 1783, 1445, 1451,  149, 1451, 1438, 1452,  120, 1443,
     1459, 1461, 1462, 1457, 1458, 1783, 1460, 1460, 1466, 1467,
     1464, 1472,    0, 1482, 1476, 1783, 1483, 1487, 1488, 1484,

     1484, 1493, 1484, 1489, 1783, 1505, 1507, 1498, 1494, 1783,
     1499, 1783, 1515, 1510, 1515,    0, 1505, 1506, 1520, 1523,
     1530, 1517, 1516, 1525, 1533, 1527, 1526, 1537, 1533, 1536,
     1538, 1547,  119, 1555,    0, 1554, 1554, 1558, 1564, 1561,
     1567, 1560, 1560, 1564, 1783, 1562, 1558, 1783, 1575, 1561,
     1571, 1570,    0, 1584, 1587, 1572, 1592, 1586, 1580, 1586,
     1602, 1603, 1783, 1594, 1602, 1604, 1601, 1613, 1600, 1616,
     1609, 1613, 1783, 1783, 1613, 1620, 1617, 1617, 1614, 1633,
     1620, 1624, 1626, 1632, 1628, 1638, 1633, 1634, 1640, 1651,
     1651, 1643, 1783, 1783, 1659, 1655, 1664, 1660, 1662, 1783,

     1656, 1656, 1783, 1668, 1673, 1673, 1670, 1666, 1682, 1678,
     1670, 1674, 1674, 1681, 1689, 1688, 1687, 1695, 1783, 1698,
     1690, 1699, 1697, 1704, 1704, 1708, 1783, 1710, 1783, 1706,
     1714, 1716, 1712, 1783, 1714, 1715, 1783, 1783, 1783, 1783,
     1780,  110,   92
    } ;

static yyconst flex_int16_t yy_def[744] =
    {   0,
      740,    1,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  741,  740,  740,  740,
      740,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  740,  740,  742,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  741,
      740,  740,  740,  743,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  742,  742,  742,  740,
      740,  743,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  743,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  742,  742,  740,  740,  740,  740,  743,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  743,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  742,  742,  740,  740,  740,  743,  742,  742,
      742,  742,  742,  742,  742,  743,  742,  742,  743,  742,
      742,  742,  740,  742,  742,  742,  742,  742,  742,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  742,
      742,  740,  740,  740,  743,  742,  742,  742,  742,  742,
      742,  742,  743,  743,  742,  743,  742,  742,  742,  740,
      742,  742,  743,  742,  743,  742,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  743,  740,  743,  742,  742,

      743,  743,  742,  743,  742,  742,  740,  742,  742,  743,
      743,  742,  743,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  743,  740,  743,
      742,  742,  743,  743,  742,  743,  742,  742,  740,  742,
      743,  743,  742,  743,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  743,  743,  743,  743,  743,  742,  743,

      743,  743,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  743,
      743,  743,  743,  743,  742,  743,  743,  743,  743,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  743,  743,  743,  743,  743,  743,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  743,  743,  743,  743,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  743,  743,  743,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  743,  743,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  743,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,    0,
      740,  740,  740
    } ;

static yyconst flex_int16_t yy_nxt[1856] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   23,   24,   25,   26,   23,   27,   28,   23,   23,
       23,   29,   30,   31,   32,   23,   23,   33,   34,   23,
       23,   35,   23,   23,   23,   36,   37,   22,   23,   23,
       24,   25,   26,   23,   27,   28,   23,   23,   29,   30,
       31,   32,   23,   23,   33,   34,   23,   23,   35,   23,
       23,   23,   38,   39,   40,   39,   42,   64,   41,   64,
       64,   39,   64,   39,   42,   64,   41,   64,   64,  143,
       64,   64,   64,   64,   64,   80,  112,   73,  117,   38,

      110,   40,   43,   81,   44,   45,   46,   47,   48,  121,
       49,   65,   74,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   80,  112,   73,  117,  110,  651,  604,
       43,   81,   44,   45,   46,   47,   48,  121,   49,   74,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       64,   64,   64,   64,   64,   64,   64,  111,  600,   64,
       64,   64,  597,   64,   64,   70,  587,   64,   94,   95,
       64,   66,  573,   67,   96,   71,   75,   97,   68,   69,
       76,   72,   77,   78,  111,   82,   64,   64,   79,   64,
       64,   83,   64,   70,   86,   64,   94,   95,   66,   87,

       67,   96,   71,   75,   97,   68,   69,   76,   72,   77,
       78,   88,   82,   84,  563,   79,   89,   85,   83,   64,
      518,   86,   64,   64,  511,  120,   64,   87,  159,   98,
      510,  118,   64,   99,  122,   64,   90,   91,   88,  100,
       84,   92,  102,   89,   85,  101,  482,   89,  119,  123,
      103,  107,  120,  104,  108,  115,  159,   98,  105,  118,
      106,   99,  122,  109,   90,   91,  100,  126,  113,   92,
      102,  116,  101,  124,   89,  119,  123,  103,  114,  107,
      104,  108,  479,  115,  130,  105,  131,  106,   64,  125,
      109,   64,  132,  470,  126,   64,  113,   64,  116,   64,

       64,  124,   64,   64,   64,  114,   64,   64,   64,   64,
      128,   64,   64,  165,   64,  133,  125,   64,  134,   64,
      127,   64,   64,  450,   64,   64,  135,  129,   64,  157,
       64,   64,  138,   64,   64,  136,  139,   64,  128,  158,
       64,  165,  140,  133,  414,  160,  134,  127,  137,   64,
      141,  148,   64,  135,  129,   64,  157,  332,   64,  146,
      138,  142,  136,  139,  144,   64,  158,  393,   64,  140,
       64,   64,  160,   64,   64,  137,  161,  141,  145,  148,
       64,  151,   64,   64,  149,   64,  146,  147,  162,  142,
       64,  144,  163,   64,  150,   64,   64,  166,   64,   64,

      164,  167,  152,  161,  154,  145,  168,  169,  173,  151,
      170,  153,  149,  171,  147,  162,  172,  176,  156,  163,
      174,  150,  177,  180,  155,  166,  178,  164,  167,  152,
      179,  181,  154,  175,  168,  169,  173,  170,  153,  182,
      171,  185,  183,  172,  176,  156,  186,  187,  174,  177,
      180,  155,  184,  190,  178,  188,  391,  191,  179,  181,
      175,  192,  371,  199,   64,   64,  182,   64,   64,  185,
      183,  332,  189,  186,  187,  193,  196,  233,   64,  184,
      190,   64,  194,  188,  191,  130,  130,  130,  130,  192,
      199,   93,  210,  195,  195,   64,  196,  196,   64,  189,

       61,   64,  223,  193,   64,  200,   64,   93,  197,   64,
      194,  202,   64,  201,   64,   64,  203,   64,   64,  210,
       64,   64,  198,   64,   64,  224,  228,   64,  206,  204,
      223,   64,  200,  207,   64,   64,  197,   64,   64,  202,
       64,  201,  205,   64,  203,  208,   64,   64,   64,  198,
       64,   64,  224,  211,  228,  212,  206,  204,  209,  213,
       64,  207,  265,   64,  196,   64,   63,   64,   64,  205,
       64,  235,  208,   62,  214,  215,  216,   64,  229,   64,
       64,  211,   64,  212,  225,  209,  230,  213,  217,  219,
       64,  218,   64,   64,   64,   64,  231,   64,  235,  226,

      227,  214,  232,  215,  216,  234,  229,  236,  222,  221,
      237,  238,  225,  220,  230,  217,  239,  219,  240,  218,
      241,  242,  243,  246,  231,  244,  226,  227,  245,  247,
      232,  248,  249,  234,  236,  253,  222,  221,  237,  238,
      220,  254,  255,  256,  239,  240,  257,  241,  258,  242,
      243,  246,  244,  250,  251,  245,  252,  247,  259,  248,
      249,  260,   61,  253,  262,  261,   41,   64,  254,  255,
       64,  256,   64,  257,  279,   64,  258,  266,  267,  268,
       64,  250,  251,   64,  252,  740,  259,   64,  264,  260,
       64,  262,  290,  261,  269,   64,   64,   64,   64,   64,

       64,  263,  279,  740,  266,  267,  268,  740,  740,   64,
      270,  273,   64,  271,   64,  276,  264,   64,   64,  290,
       64,   64,  269,   64,   64,  272,   64,   64,  263,   64,
       64,   64,  740,   64,   64,  275,   64,  270,  274,  273,
      278,  271,  283,  280,  292,  282,  740,  284,   64,  281,
       64,   64,  272,   64,  277,   64,   64,   64,   64,   64,
       64,   64,  275,   64,   64,  274,   64,  291,  278,  286,
      280,  285,  292,  282,   64,  284,  281,   64,  288,  293,
      294,  277,  295,  296,  298,  287,  297,  299,  740,  300,
      301,  302,  289,  307,  291,  303,  304,  286,  285,  305,

      306,  308,  309,  310,  314,  288,  293,  311,  294,  295,
      296,  298,  287,  312,  297,  299,  300,  301,  302,  313,
      289,  307,  303,  304,  315,  316,  305,  306,  308,  309,
      317,  310,  314,  318,  311,  319,  320,  740,  321,  322,
      312,  323,  740,  324,  325,  326,  313,  327,  328,  329,
       64,  315,  316,   64,  333,  334,   64,  317,  335,   64,
      350,  318,  740,  319,  320,  321,  740,  322,  740,  323,
      324,  325,  740,  326,  327,  328,  346,  329,  330,  331,
      357,   64,  333,  334,   64,  335,   64,   64,  350,   64,
       64,  336,   64,   64,   64,   64,   64,   64,  359,  343,

      337,   64,  344,  346,   64,  330,  331,  357,  358,   64,
      338,  339,   64,   64,   64,   64,   64,   64,   64,  336,
      341,  340,  342,  345,  740,  359,   64,  343,  337,   64,
      344,   64,  347,  348,   64,  353,  358,  338,   64,  339,
       64,   64,  355,   64,   64,   64,  360,  341,  340,  342,
      362,  345,   64,  349,  352,   64,  363,  740,  351,  354,
      347,  348,  364,  361,  365,  366,  740,  367,  368,  369,
      370,  740,  372,  373,  360,  356,  374,  362,  375,  376,
      349,  377,  352,  378,  363,  351,  379,  354,  380,  364,
      361,  365,  381,  366,  367,  368,  382,  369,  370,  372,

      383,  373,  356,  384,  374,  385,  375,  376,  386,  377,
      387,  378,  388,  394,  379,  389,  380,  390,  392,  381,
      395,  396,   64,  382,   64,   64,  397,  398,  383,   64,
      384,   64,   64,  385,   64,  386,   64,  387,  401,   64,
      388,  394,  389,   64,  390,  392,   64,  395,   64,   64,
      402,   64,   64,  397,  398,   64,  404,  399,   64,   64,
       64,   64,   64,   64,   64,   64,  401,  400,   64,   64,
      407,   64,   64,  410,   64,  413,   64,  402,   64,   64,
      415,   64,  416,  404,  399,  408,  740,  403,  417,  419,
      411,  409,  418,  420,  400,  405,  406,  407,  412,  421,

      424,  410,  413,  425,  422,  426,  427,  415,  428,  429,
      416,  423,  430,  408,  403,  417,  419,  411,  409,  431,
      418,  420,  405,  406,  432,  412,  433,  421,  424,  434,
      425,  422,  426,  435,  427,  428,  429,  437,  423,  430,
      438,  439,  440,  441,  740,  442,  443,  431,  444,  740,
      445,  432,  446,  433,  447,  448,  449,  434,  453,   64,
      454,  436,   64,   64,  456,  437,   64,  438,  459,  439,
      440,  441,  442,  451,  443,   64,  444,  445,   64,  461,
      446,  447,  448,  449,  462,  453,  452,  454,  436,  455,
       64,   64,  456,   64,   64,  459,   64,   64,  464,   64,

       64,  451,  465,  468,  457,  458,  461,   64,  466,  467,
       64,  462,  469,  452,  471,  472,  473,  455,  475,  460,
      474,  463,  740,  476,  477,  481,  464,  478,  480,  483,
      465,  468,  457,  458,  484,  466,  467,  485,  486,  469,
      487,  471,  472,  488,  473,  475,  460,  489,  474,  463,
      476,  490,  477,  481,  478,  480,  491,  483,  492,  493,
      494,  484,  495,  496,  497,  485,  486,  487,   64,   64,
      488,   64,   64,   64,  498,  489,   64,   64,  490,   64,
       64,   64,   64,  491,   64,  492,  500,  493,  494,  495,
      502,  496,  497,  499,  501,  503,  504,   64,  505,  506,

      507,  498,  508,  509,  740,  512,  513,  514,   64,  515,
      516,   64,  517,  500,  519,  740,  520,  502,  521,  522,
      523,  499,  503,  504,  524,  505,  506,  507,  525,  508,
      526,  509,  512,  527,  513,  514,  515,  528,  516,  517,
      529,  530,  519,  520,  531,  521,  522,  532,  523,  533,
      534,  539,  524,  536,  537,  538,  525,  540,  526,   64,
      541,  527,   64,  542,  543,  528,  544,  529,  530,  545,
      546,  531,  547,  535,  532,  548,  533,  549,  534,  539,
      536,  550,  537,  538,  540,  551,  740,  552,  541,  553,
      542,  543,  554,  544,  555,  556,  545,  557,  546,  558,

      547,  535,  548,  559,  561,  549,  560,  562,  564,  550,
      565,  566,  567,  551,  552,  568,  553,  569,  574,  554,
      570,  555,  571,  556,  557,  572,  575,  558,  576,  577,
      578,  559,  561,  560,  562,  579,  564,  580,  565,  566,
      567,  581,  584,  568,  582,  569,  574,  570,  583,  571,
      585,  586,  572,  588,  575,  576,  589,  577,  578,  590,
      740,  591,  579,  592,  593,  580,  594,  595,  598,  581,
      584,  582,  596,  599,  601,  583,  602,  585,  586,  603,
      588,  605,  606,  589,  607,  608,  614,  590,  591,  609,
      610,  592,  593,  594,  611,  595,  598,  612,  613,  596,

      615,  599,  601,  602,  616,  617,  619,  603,  605,  618,
      606,  620,  607,  608,  614,  621,  609,  610,  622,  623,
      624,  611,  625,  626,  612,  613,  627,  615,  628,  740,
      629,  616,  630,  617,  619,  631,  618,  632,  634,  620,
      633,  635,  636,  621,  637,  622,  623,  638,  624,  625,
      626,  639,  740,  640,  627,  641,  628,  629,  642,  630,
      643,  649,  631,  644,  645,  632,  634,  633,  635,  636,
      646,  647,  637,  648,  650,  638,  652,  653,  654,  639,
      640,  655,  641,  656,  657,  642,  658,  661,  643,  649,
      644,  645,  659,  660,  662,  663,  664,  646,  647,  665,

      648,  666,  650,  667,  652,  653,  654,  668,  669,  655,
      670,  656,  657,  671,  658,  661,  672,  673,  674,  659,
      660,  662,  663,  675,  664,  676,  665,  677,  666,  678,
      667,  679,  740,  680,  681,  668,  669,  670,  682,  683,
      685,  671,  684,  672,  673,  674,  686,  687,  740,  688,
      689,  675,  690,  676,  677,  691,  699,  678,  692,  679,
      680,  693,  681,  694,  695,  682,  696,  683,  685,  684,
      697,  698,  700,  686,  701,  687,  688,  689,  702,  690,
      703,  704,  705,  691,  699,  692,  706,  707,  693,  708,
      694,  695,  709,  696,  710,  711,  712,  697,  698,  700,

      713,  716,  701,  714,  715,  717,  702,  703,  718,  704,
      705,  719,  720,  721,  706,  707,  722,  708,  723,  709,
      724,  710,  725,  711,  712,  726,  740,  727,  713,  716,
      714,  715,  728,  717,  729,  718,  730,  731,  719,  720,
      721,  732,  733,  734,  722,  723,  735,  724,  736,  737,
      725,  738,  739,  726,  727,  740,  740,  740,  740,  728,
      740,  729,  740,  730,  731,  740,  740,  740,  732,  733,
      734,  740,  740,  735,  740,  736,  737,  740,  738,  739,
       60,   60,    3,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740
    } ;

static yyconst flex_int16_t yy_chk[1856] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    5,    7,    5,   15,   23,   15,   25,
       23,   39,   25,   39,   41,   29,   41,   65,   29,   79,
       65,   84,   79,  743,   84,   29,   50,   25,   53,    2,

       48,    7,   16,   29,   16,   16,   16,   16,   16,   56,
       16,  742,   25,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   29,   50,   25,   53,   48,  633,  579,
       16,   29,   16,   16,   16,   16,   16,   56,   16,   25,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       22,   24,   26,   22,   24,   26,   27,   49,  575,   27,
       28,   30,  571,   28,   30,   24,  559,   32,   43,   43,
       32,   22,  543,   22,   44,   24,   26,   44,   22,   22,
       27,   24,   28,   28,   49,   30,   31,   33,   28,   31,
       33,   30,   34,   24,   32,   34,   43,   43,   22,   33,

       22,   44,   24,   26,   44,   22,   22,   27,   24,   28,
       28,   33,   30,   31,  529,   28,   34,   31,   30,   35,
      481,   32,   35,   38,  473,   55,   38,   33,   96,   45,
      472,   54,  128,   45,   57,  128,   35,   35,   33,   45,
       31,   38,   46,   34,   31,   45,  434,   38,   54,   57,
       46,   47,   55,   46,   47,   52,   96,   45,   46,   54,
       46,   45,   57,   47,   35,   35,   45,   59,   51,   38,
       46,   52,   45,   58,   38,   54,   57,   46,   51,   47,
       46,   47,  430,   52,   69,   46,   69,   46,   66,   58,
       47,   66,   69,  420,   59,   69,   51,   67,   52,   68,

       67,   58,   68,   70,   71,   51,   70,   71,   72,   75,
       67,   72,   75,  102,   74,   70,   58,   74,   70,   73,
       66,   76,   73,  398,   76,   77,   71,   68,   77,   94,
       82,   80,   74,   82,   80,   72,   75,   85,   67,   95,
       85,  102,   76,   70,  357,   97,   70,   66,   73,   78,
       77,   85,   78,   71,   68,   81,   94,  332,   81,   82,
       74,   78,   72,   75,   80,   83,   95,  326,   83,   76,
       86,   87,   97,   86,   87,   73,   98,   77,   81,   85,
       88,   87,   89,   88,   86,   89,   82,   83,   99,   78,
       90,   80,  100,   90,   86,   91,   92,  103,   91,   92,

      101,  104,   88,   98,   90,   81,  105,  106,  110,   87,
      107,   89,   86,  108,   83,   99,  109,  112,   92,  100,
      111,   86,  113,  116,   91,  103,  114,  101,  104,   88,
      115,  117,   90,  111,  105,  106,  110,  107,   89,  118,
      108,  120,  119,  109,  112,   92,  121,  122,  111,  113,
      116,   91,  119,  124,  114,  123,  324,  125,  115,  117,
      111,  126,  304,  132,  129,  127,  118,  129,  127,  120,
      119,  265,  123,  121,  122,  127,  195,  166,  133,  119,
      124,  133,  129,  123,  125,  130,  131,  130,  131,  126,
      132,   93,  143,  130,  131,  134,  130,  131,  134,  123,

       60,  135,  157,  127,  135,  133,  136,   42,  131,  136,
      129,  135,  137,  134,  138,  137,  136,  138,  139,  143,
      140,  139,  131,  140,  141,  159,  161,  141,  139,  137,
      157,  142,  133,  140,  142,  144,  131,  145,  144,  135,
      145,  134,  138,  146,  136,  141,  146,  148,  147,  131,
      148,  147,  159,  144,  161,  145,  139,  137,  142,  147,
      149,  140,  196,  149,  196,  150,   20,  151,  150,  138,
      151,  168,  141,   18,  148,  149,  150,  152,  162,  153,
      152,  144,  153,  145,  160,  142,  163,  147,  151,  153,
      154,  152,  155,  154,  156,  155,  164,  156,  168,  160,

      160,  148,  165,  149,  150,  167,  162,  169,  156,  155,
      170,  171,  160,  154,  163,  151,  172,  153,  173,  152,
      174,  175,  176,  179,  164,  177,  160,  160,  178,  180,
      165,  181,  182,  167,  169,  184,  156,  155,  170,  171,
      154,  185,  186,  187,  172,  173,  188,  174,  189,  175,
      176,  179,  177,  183,  183,  178,  183,  180,  190,  181,
      182,  191,   17,  184,  192,  191,   12,  193,  185,  186,
      193,  187,  194,  188,  210,  194,  189,  197,  198,  199,
      200,  183,  183,  200,  183,    3,  190,  201,  194,  191,
      201,  192,  223,  191,  200,  202,  203,  204,  202,  203,

      204,  193,  210,    0,  197,  198,  199,    0,    0,  205,
      201,  204,  205,  202,  206,  207,  194,  206,  207,  223,
      208,  211,  200,  208,  211,  203,  209,  212,  193,  209,
      212,  213,    0,  215,  213,  206,  215,  201,  205,  204,
      209,  202,  214,  211,  225,  213,    0,  215,  214,  212,
      216,  214,  203,  216,  208,  217,  218,  219,  217,  218,
      219,  220,  206,  222,  220,  205,  222,  224,  209,  217,
      211,  216,  225,  213,  221,  215,  212,  221,  219,  226,
      227,  208,  228,  229,  231,  218,  230,  232,    0,  233,
      234,  235,  221,  241,  224,  236,  237,  217,  216,  238,

      239,  242,  243,  244,  248,  219,  226,  245,  227,  228,
      229,  231,  218,  246,  230,  232,  233,  234,  235,  247,
      221,  241,  236,  237,  249,  249,  238,  239,  242,  243,
      250,  244,  248,  251,  245,  252,  253,    0,  254,  255,
      246,  256,    0,  257,  258,  259,  247,  260,  261,  262,
      263,  249,  249,  263,  266,  267,  264,  250,  268,  264,
      283,  251,    0,  252,  253,  254,    0,  255,    0,  256,
      257,  258,    0,  259,  260,  261,  279,  262,  263,  264,
      290,  269,  266,  267,  269,  268,  270,  271,  283,  270,
      271,  269,  274,  272,  273,  274,  272,  273,  292,  276,

      270,  275,  276,  279,  275,  263,  264,  290,  291,  277,
      271,  272,  277,  278,  280,  281,  278,  280,  281,  269,
      274,  273,  275,  278,    0,  292,  282,  276,  270,  282,
      276,  284,  280,  281,  284,  286,  291,  271,  286,  272,
      285,  287,  288,  285,  287,  288,  293,  274,  273,  275,
      294,  278,  289,  282,  285,  289,  295,    0,  284,  287,
      280,  281,  296,  293,  297,  298,    0,  299,  300,  301,
      303,    0,  305,  306,  293,  289,  307,  294,  308,  309,
      282,  310,  285,  311,  295,  284,  312,  287,  313,  296,
      293,  297,  314,  298,  299,  300,  315,  301,  303,  305,

      316,  306,  289,  317,  307,  318,  308,  309,  319,  310,
      320,  311,  321,  328,  312,  322,  313,  323,  325,  314,
      329,  330,  331,  315,  330,  331,  334,  335,  316,  336,
      317,  337,  336,  318,  337,  319,  338,  320,  343,  338,
      321,  328,  322,  339,  323,  325,  339,  329,  340,  341,
      344,  340,  341,  334,  335,  342,  346,  336,  342,  345,
      347,  348,  345,  347,  348,  349,  343,  339,  349,  352,
      350,  351,  352,  353,  351,  355,  354,  344,  356,  354,
      358,  356,  359,  346,  336,  351,    0,  345,  360,  362,
      353,  352,  361,  363,  339,  347,  348,  350,  354,  364,

      368,  353,  355,  369,  366,  370,  371,  358,  372,  373,
      359,  366,  374,  351,  345,  360,  362,  353,  352,  375,
      361,  363,  347,  348,  378,  354,  379,  364,  368,  380,
      369,  366,  370,  381,  371,  372,  373,  382,  366,  374,
      383,  384,  385,  386,    0,  387,  388,  375,  389,    0,
      391,  378,  393,  379,  395,  396,  397,  380,  401,  399,
      402,  381,  399,  400,  404,  382,  400,  383,  407,  384,
      385,  386,  387,  399,  388,  403,  389,  391,  403,  410,
      393,  395,  396,  397,  411,  401,  400,  402,  381,  403,
      405,  406,  404,  405,  406,  407,  408,  409,  413,  408,

      409,  399,  414,  418,  405,  406,  410,  412,  416,  417,
      412,  411,  419,  400,  421,  422,  423,  403,  425,  408,
      424,  412,    0,  426,  427,  433,  413,  429,  431,  435,
      414,  418,  405,  406,  437,  416,  417,  438,  439,  419,
      440,  421,  422,  441,  423,  425,  408,  443,  424,  412,
      426,  444,  427,  433,  429,  431,  445,  435,  446,  447,
      448,  437,  450,  453,  454,  438,  439,  440,  451,  452,
      441,  451,  452,  455,  456,  443,  455,  457,  444,  458,
      457,  460,  458,  445,  460,  446,  461,  447,  448,  450,
      464,  453,  454,  460,  463,  465,  466,  463,  467,  468,

      469,  456,  470,  471,    0,  474,  476,  477,  535,  478,
      479,  535,  480,  461,  482,    0,  483,  464,  485,  486,
      487,  460,  465,  466,  488,  467,  468,  469,  489,  470,
      490,  471,  474,  491,  476,  477,  478,  492,  479,  480,
      493,  494,  482,  483,  495,  485,  486,  496,  487,  497,
      498,  502,  488,  500,  501,  501,  489,  503,  490,  499,
      504,  491,  499,  506,  507,  492,  508,  493,  494,  509,
      510,  495,  511,  499,  496,  512,  497,  513,  498,  502,
      500,  514,  501,  501,  503,  516,    0,  518,  504,  519,
      506,  507,  520,  508,  521,  522,  509,  523,  510,  524,

      511,  499,  512,  525,  527,  513,  526,  528,  530,  514,
      531,  533,  534,  516,  518,  537,  519,  538,  544,  520,
      540,  521,  541,  522,  523,  542,  545,  524,  546,  547,
      548,  525,  527,  526,  528,  549,  530,  550,  531,  533,
      534,  551,  554,  537,  552,  538,  544,  540,  553,  541,
      556,  558,  542,  560,  545,  546,  561,  547,  548,  562,
        0,  563,  549,  564,  565,  550,  568,  569,  573,  551,
      554,  552,  570,  574,  576,  553,  577,  556,  558,  578,
      560,  580,  581,  561,  582,  583,  590,  562,  563,  584,
      585,  564,  565,  568,  587,  569,  573,  588,  589,  570,

      591,  574,  576,  577,  592,  594,  597,  578,  580,  595,
      581,  598,  582,  583,  590,  599,  584,  585,  600,  601,
      602,  587,  603,  604,  588,  589,  606,  591,  607,    0,
      608,  592,  609,  594,  597,  611,  595,  613,  615,  598,
      614,  617,  618,  599,  619,  600,  601,  620,  602,  603,
      604,  621,    0,  622,  606,  623,  607,  608,  624,  609,
      625,  631,  611,  626,  627,  613,  615,  614,  617,  618,
      628,  629,  619,  630,  632,  620,  634,  636,  637,  621,
      622,  638,  623,  639,  640,  624,  641,  644,  625,  631,
      626,  627,  642,  643,  646,  647,  649,  628,  629,  650,

      630,  651,  632,  652,  634,  636,  637,  654,  655,  638,
      656,  639,  640,  657,  641,  644,  658,  659,  660,  642,
      643,  646,  647,  661,  649,  662,  650,  664,  651,  665,
      652,  666,    0,  667,  668,  654,  655,  656,  669,  670,
      672,  657,  671,  658,  659,  660,  675,  676,    0,  677,
      678,  661,  679,  662,  664,  680,  688,  665,  681,  666,
      667,  682,  668,  683,  684,  669,  685,  670,  672,  671,
      686,  687,  689,  675,  690,  676,  677,  678,  691,  679,
      692,  695,  696,  680,  688,  681,  697,  698,  682,  699,
      683,  684,  701,  685,  702,  704,  705,  686,  687,  689,

      706,  709,  690,  707,  708,  710,  691,  692,  711,  695,
      696,  712,  713,  714,  697,  698,  715,  699,  716,  701,
      717,  702,  718,  704,  705,  720,    0,  721,  706,  709,
      707,  708,  722,  710,  723,  711,  724,  725,  712,  713,
      714,  726,  728,  730,  715,  716,  731,  717,  732,  733,
      718,  735,  736,  720,  721,    0,    0,    0,    0,  722,
        0,  723,    0,  724,  725,    0,    0,    0,  726,  728,
      730,    0,    0,  731,    0,  732,  733,    0,  735,  736,
      741,  741,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pddl+.lex"
#line 2 "pddl+.lex"

#include <string>

#include <fstream>
  using std::cin;
  using std::cout;
  using std::cerr;
  using std::istream;
  using namespace VAL;
extern "C" int yywrap();

#line 1072 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 26 "pddl+.lex"

#line 1177 "lex.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 741 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1783 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "pddl+.lex"
{return OPEN_BRAC;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "pddl+.lex"
{return CLOSE_BRAC;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "pddl+.lex"
{return OPEN_SQ;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 30 "pddl+.lex"
{return CLOSE_SQ;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 31 "pddl+.lex"
{return REQS;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 32 "pddl+.lex"
{return EQUALITY;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 33 "pddl+.lex"
{return STRIPS;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 34 "pddl+.lex"
{return ADL;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 35 "pddl+.lex"
{return TYPING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 36 "pddl+.lex"
{return DISJUNCTIVE_PRECONDS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "pddl+.lex"
{return EXT_PRECS;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "pddl+.lex"
{return UNIV_PRECS;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "pddl+.lex"
{return QUANT_PRECS;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 40 "pddl+.lex"
{return COND_EFFS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 41 "pddl+.lex"
{return FLUENTS;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 42 "pddl+.lex"
{return NUMERICFLUENTS;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 43 "pddl+.lex"
{return OBJECTFLUENTS;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 44 "pddl+.lex"
{return ACTIONCOSTS;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 45 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 46 "pddl+.lex"
{return PREFERENCES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 47 "pddl+.lex"
{return CONSTRAINTS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 48 "pddl+.lex"
{return CONSTANTS;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 49 "pddl+.lex"
{return PREDS;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "pddl+.lex"
{return FUNCTIONS;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 51 "pddl+.lex"
{return CLASSES;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 52 "pddl+.lex"
{return CLASS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 53 "pddl+.lex"
{return TYPES;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 54 "pddl+.lex"
{return DURATIVE_ACTIONS;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 55 "pddl+.lex"
{return DURATION_INEQUALITIES;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 56 "pddl+.lex"
{return CONTINUOUS_EFFECTS;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 57 "pddl+.lex"
{return NEGATIVE_PRECONDITIONS;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 58 "pddl+.lex"
{return DERIVED_PREDICATES;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 59 "pddl+.lex"
{return TIMED_INITIAL_LITERALS;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 60 "pddl+.lex"
{return DEFINE;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 61 "pddl+.lex"
{return PDDLDOMAIN;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 62 "pddl+.lex"
{return ACTION;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 63 "pddl+.lex"
{return PROCESS;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 64 "pddl+.lex"
{return EVENT;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 65 "pddl+.lex"
{return DURATIVE_ACTION;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 66 "pddl+.lex"
{return DERIVED;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 67 "pddl+.lex"
{return ARGS;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 68 "pddl+.lex"
{return PRE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 69 "pddl+.lex"
{return CONDITION;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 70 "pddl+.lex"
{return START_PRE;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 71 "pddl+.lex"
{return END_PRE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 72 "pddl+.lex"
{return AT_START;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 73 "pddl+.lex"
{return AT_END;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 74 "pddl+.lex"
{return OVER_ALL;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 75 "pddl+.lex"
{return EFFECTS;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 76 "pddl+.lex"
{return INITIAL_EFFECT;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 77 "pddl+.lex"
{return FINAL_EFFECT;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 78 "pddl+.lex"
{return INVARIANT;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 79 "pddl+.lex"
{return DURATION;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 80 "pddl+.lex"
{return AND;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 81 "pddl+.lex"
{return OR;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 82 "pddl+.lex"
{return EXISTS;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 83 "pddl+.lex"
{return FORALL;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 84 "pddl+.lex"
{return IMPLY;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 85 "pddl+.lex"
{return NOT;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 86 "pddl+.lex"
{return WHEN;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 87 "pddl+.lex"
{return EITHER;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 88 "pddl+.lex"
{return PROBLEM;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 89 "pddl+.lex"
{return FORDOMAIN;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 90 "pddl+.lex"
{return OBJECTS;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 91 "pddl+.lex"
{return INITIALLY;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 "pddl+.lex"
{return GOALS;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 "pddl+.lex"
{return EQ;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 "pddl+.lex"
{return LENGTH;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 "pddl+.lex"
{return SERIAL;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 "pddl+.lex"
{return PARALLEL;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 "pddl+.lex"
{return METRIC;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 "pddl+.lex"
{return MINIMIZE;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 "pddl+.lex"
{return MAXIMIZE;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 "pddl+.lex"
{return ISVIOLATED;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 "pddl+.lex"
{return HASHT;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 "pddl+.lex"
{return DURATION_VAR;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 "pddl+.lex"
{return TOTAL_TIME;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 "pddl+.lex"
{return NUMBER;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 "pddl+.lex"
{return INCREASE;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 "pddl+.lex"
{return DECREASE;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 "pddl+.lex"
{return SCALE_UP;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 "pddl+.lex"
{return SCALE_DOWN;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 "pddl+.lex"
{return ASSIGN;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 111 "pddl+.lex"
{return PREFERENCE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 112 "pddl+.lex"
{return ALWAYS;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 113 "pddl+.lex"
{return SOMETIME;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "pddl+.lex"
{return WITHIN;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 115 "pddl+.lex"
{return ATMOSTONCE;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 116 "pddl+.lex"
{return SOMETIMEAFTER;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 117 "pddl+.lex"
{return SOMETIMEBEFORE;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 118 "pddl+.lex"
{return ALWAYSWITHIN;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 119 "pddl+.lex"
{return HOLDDURING;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 120 "pddl+.lex"
{return HOLDAFTER;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 121 "pddl+.lex"
{return PLUS;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 122 "pddl+.lex"
{return HYPHEN;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 123 "pddl+.lex"
{return MUL;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 124 "pddl+.lex"
{return DIV;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 125 "pddl+.lex"
{return GREATER;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 126 "pddl+.lex"
{return GREATEQ;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 127 "pddl+.lex"
{return LESS;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 128 "pddl+.lex"
{return LESSEQ;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 129 "pddl+.lex"
{return Q;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 130 "pddl+.lex"
{return COLON;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 131 "pddl+.lex"
{return DOT;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 132 "pddl+.lex"
{return MODULES;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 134 "pddl+.lex"
{unsigned int i;
           for(i = 3;i < strlen(yytext);++i)
           {
           	  if(yytext[i] != '\t' && yytext[i] != ' ') break;
           };
           yylval.fval = atof(yytext+i);
			return (AT_TIME);
          }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 144 "pddl+.lex"
{unsigned int i; 
          yylval.cp = new char[strlen(yytext)+1];
          strcpy(yylval.cp,yytext);
	  for(i = 0;i<strlen(yylval.cp);i++)
	      yylval.cp[i] = tolower(yylval.cp[i]);
	  // If symbol is registered as a function symbol,
	  // return token FUNCTION_SYMBOL else return NAME
	  //cout << yytext << " " << line_no << "\n";
	  if (current_analysis->func_tab.symbol_probe(yylval.cp) != NULL)
	      return FUNCTION_SYMBOL;
	  else
	      return NAME;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 157 "pddl+.lex"
;
	YY_BREAK
case 110:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 158 "pddl+.lex"
;
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 159 "pddl+.lex"
{line_no++;};
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 161 "pddl+.lex"
{yylval.ival = atoi(yytext);return (INTVAL);}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 162 "pddl+.lex"
{yylval.fval = atof(yytext);return (FLOATVAL);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 164 "pddl+.lex"
ECHO;
	YY_BREAK
#line 1853 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 741 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 741 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 740);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 164 "pddl+.lex"




extern "C++" {
  int yyFlexLexer::yywrap()
{
	return 1;
};
};


