
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <cstdio>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 115
#define YY_END_OF_BUFFER 116
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[743] =
    {   0,
      112,  112,  116,  115,  109,  111,  115,    1,    2,   97,
       95,   96,  105,   98,  112,  104,  115,  101,   67,   99,
      103,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,    3,    4,  108,  109,   75,
      112,  113,  112,  114,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  110,  102,  100,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,   55,  108,  108,  108,  108,
      108,  108,  108,  108,  113,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  108,   54,
      108,    0,    0,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,   59,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,    0,    8,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  108,  108,    0,  107,    0,    0,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,   60,  108,   78,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   66,   65,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       19,    0,    0,    0,  108,  108,  107,    0,    0,  108,
      108,  108,  108,  108,  108,  108,  108,  108,   58,  108,
      108,  108,  108,  108,    0,  108,  108,  108,  108,  108,
      108,    0,   26,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   38,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   27,    0,
        0,   86,   84,  107,   47,    0,  108,  108,   34,   35,
      108,   61,   56,   57,  108,  108,  108,  108,  108,  108,
       79,    0,  108,  108,  108,  108,  108,   88,   36,    0,
        0,    0,    0,    0,    0,    0,   63,    0,   49,    0,
        0,    0,    0,    0,    0,    0,    0,   68,   71,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   69,    0,    7,    0,    9,    0,  108,    0,  108,

      108,  108,  108,  108,  108,  108,  108,  108,    0,  108,
       62,  108,  108,  108,  108,    0,   25,    0,    0,    0,
        0,   40,    0,    0,    0,    0,    0,    0,    0,   15,
        0,    0,    0,  106,    0,    0,    0,   64,    0,    0,
        0,    0,    0,   37,    0,    0,    0,    0,    0,  108,
       46,  108,   81,   76,  108,  108,   80,  108,   73,   72,
       48,  108,  108,   82,   87,  108,    0,    0,    0,    0,
        0,    0,    0,   53,    0,    0,    6,    0,    0,    0,
        0,    0,    0,    0,    0,   70,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  108,  108,  108,  108,  108,

      108,  108,  108,  108,    0,   43,   22,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   24,    0,   52,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  108,  108,   94,  108,  108,   85,   83,  108,  108,
       77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   41,    0,   23,    0,
        0,    0,    0,    0,    0,  108,  108,   93,   74,  108,
      108,    0,    0,   21,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   20,    0,    0,
        0,    0,    0,  108,   89,  108,  108,   18,    0,    0,

        0,    0,    0,    0,    0,    0,   51,    0,    0,    0,
        0,   42,    0,    5,    0,    0,    0,   92,  108,  108,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   90,  108,    0,    0,
        0,    0,    0,    0,    0,    0,   50,    0,    0,   17,
        0,    0,    0,    0,   91,    0,    0,    0,    0,    0,
       39,    0,    0,    0,   16,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   28,   45,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   30,   32,    0,    0,    0,    0,

        0,   44,    0,    0,   14,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       29,    0,    0,    0,    0,    0,    0,    0,   31,    0,
       33,    0,    0,    0,    0,   12,    0,    0,   13,   10,
       11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,   19,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,    1,   47,    1,   30,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   30,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    1,    4,    1,    1,    1,    1,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4
    } ;

static yyconst flex_int16_t yy_base[747] =
    {   0,
        0,   34,  699, 1802,   72, 1802,   36, 1802, 1802, 1802,
     1802,  684, 1802, 1802,   66,   83,  682,  666, 1802,  664,
     1802,  141,   68,  142,   70,  143,  147,  151,   76,  152,
      177,  158,  178,  183,  210, 1802, 1802,  214,   80, 1802,
       74,  549,   77,   80,  147,  144,  206,  218,  224,   67,
      125,   73,  245,  232,   78,  212,  186,   86,  211,  246,
      235,  554, 1802, 1802, 1802,    0,   82,  279,  288,  290,
      283,  294,  295,  299,  310,  305,  300,  312,  316,  340,
      223,  322,  346,  321,  356,  328,  358,  362,  332,  371,
      381,  385,  387,  389,  524,  291,  309,  209,  313,  321,

      336,  345,  352,  358,  382,  367,  384,  384,  384,  378,
      386,  393,  394,  391,  386,  404,  402,  399,  400,  395,
      415,  418,  406,  406,  434,  428,  426,  435,  455,  464,
      468,  482,  495,  441,  470,  499,  491,  500,  504,  480,
      515,  513,  519,  528,  438,  530,  539,  541,  558,  556,
      560,  562,  543,  574,  568,  581,  590,  586,  466, 1802,
      451,  567,  474,  532,  556,  560,  573,  511,  582,  482,
      544,  592,  591,  597,  590,  583,  603,  598,  590,  588,
      609,  607,  610,  615,  614,  620,  611,  606,  622,  616,
      628,  634,  644,  619,  664,  656,  472,  533,  628,  636,

      642,  680,  679,  681,  685,  701,  703,  705,  707,  713,
      709,  651,  717,  718,  728,  730,  734,  735,  746,  752,
      754,  758,  768,  762,  712,  717,  673,  721,  746,  738,
      743,  760,  751,  770,  759,  764,  760,  761,  770,  770,
      765, 1802,  769,  768,  768,  780,  780,  774,  777,  787,
      811,  785,  795,  805,  809,  796,  811,  824,  808,  813,
      822,  811,  817,  828,  843,  845,  459,  831,  839,  825,
      873,  855,  878,  884,  879,  885,  886,  880,  891,  900,
      868,  896,  905,  909,  894,  917,  943,  922,  947,  924,
      926,  908,  925,  906,  942,  914,  931,  918,  925,  935,

      926,  929,  941, 1802,  946,  454,  941,  943,  956,  954,
      957,  965,  964,  961,  966,  957,  969,  977,  972,  980,
      971,  971,  983,  976,  983,  383,  980,  314, 1802,  993,
      984, 1015, 1021,  301, 1802,  987,  987, 1033, 1039, 1044,
     1045, 1046, 1050, 1051, 1012, 1002, 1057, 1019, 1062, 1063,
     1068, 1031, 1072, 1070, 1061, 1077, 1027, 1078,  284, 1048,
     1064, 1061, 1077, 1059, 1080, 1082, 1802, 1076, 1802, 1081,
     1061, 1078, 1090, 1078, 1084, 1088, 1103, 1802, 1802, 1092,
     1098, 1118, 1131, 1123, 1110, 1127, 1132, 1129, 1117, 1131,
     1134, 1802, 1125, 1802, 1133, 1802, 1125, 1122, 1126,  273,

     1149, 1161, 1131, 1135, 1185, 1157, 1190, 1194, 1148, 1175,
     1200, 1159, 1167, 1202, 1155, 1194, 1802, 1188, 1184, 1189,
     1190,  237, 1186, 1195, 1195, 1208, 1188, 1194, 1209, 1802,
     1203,  221, 1205, 1802, 1215,  215, 1215, 1802, 1212, 1217,
     1220, 1214, 1223, 1802, 1229, 1229, 1227, 1233, 1251, 1244,
     1802, 1240, 1265, 1269, 1253, 1253, 1274, 1247, 1279, 1284,
     1802, 1285, 1248,    0, 1293, 1264, 1268, 1271, 1272, 1278,
     1272, 1279, 1280,  211,  205, 1281, 1802, 1288, 1293, 1282,
     1297, 1285,  163, 1297, 1294, 1802, 1289, 1288, 1304, 1308,
     1308, 1309, 1310, 1312, 1312, 1306, 1315, 1318, 1324, 1335,

     1353, 1331, 1353, 1341, 1329, 1349, 1802, 1332, 1338, 1342,
     1339, 1353, 1363, 1352, 1366, 1364, 1802, 1364, 1802, 1357,
     1364, 1356, 1361, 1362, 1362, 1380, 1385, 1377, 1391, 1376,
      157, 1393, 1399,    0, 1398, 1402, 1418,    0, 1404, 1406,
        0, 1394, 1403, 1397,  153, 1414, 1415, 1410, 1418, 1421,
     1415, 1425, 1425, 1417, 1415, 1427, 1802, 1422, 1802, 1421,
      149, 1424, 1430, 1437, 1434, 1443, 1450,    0,    0, 1437,
     1452, 1442,  120, 1802, 1460, 1462,  119, 1463, 1450, 1464,
      102, 1455, 1471, 1473, 1474, 1467, 1468, 1802, 1469, 1468,
     1475, 1489, 1474, 1481,    0, 1493, 1485, 1802, 1498, 1499,

     1501, 1497, 1498, 1502, 1497, 1504, 1802, 1518, 1520, 1511,
     1508, 1802, 1511, 1802, 1526, 1520, 1529,    0, 1518, 1519,
     1535, 1537, 1542, 1530, 1529, 1538, 1537, 1536, 1537, 1545,
     1541, 1546, 1561, 1558,   84, 1565,    0, 1565, 1566, 1571,
     1577, 1574, 1581, 1571, 1571, 1578, 1802, 1575, 1571, 1802,
     1588, 1573, 1585, 1584,    0, 1596, 1599, 1585, 1600, 1596,
     1590, 1600, 1612, 1614, 1802, 1606, 1613, 1614, 1611, 1624,
     1613, 1623, 1619, 1628, 1802, 1802, 1624, 1631, 1628, 1629,
     1625, 1643, 1629, 1634, 1635, 1643, 1638, 1645, 1642, 1659,
     1653, 1659, 1661, 1654, 1802, 1802, 1670, 1668, 1674, 1670,

     1673, 1802, 1669, 1668, 1802, 1674, 1685, 1684, 1680, 1676,
     1696, 1690, 1681, 1684, 1684, 1694, 1700, 1700, 1698, 1707,
     1802, 1708, 1700, 1705, 1705, 1712, 1714, 1717, 1802, 1719,
     1802, 1715, 1722, 1724, 1722, 1802, 1723, 1724, 1802, 1802,
     1802, 1802, 1787, 1791, 1794, 1797
    } ;

static yyconst flex_int16_t yy_def[747] =
    {   0,
      742,    1,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  743,  742,  744,  742,  742,  742,
      742,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  742,  742,  745,  742,  742,
      742,  742,  743,  743,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  744,  742,  742,  742,  746,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  745,  745,
      745,  742,  742,  746,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  746,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  745,  745,  742,  742,  742,  742,

      746,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  746,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  745,  745,  742,  742,  742,  746,
      745,  745,  745,  745,  745,  745,  745,  746,  745,  745,
      746,  745,  745,  745,  742,  745,  745,  745,  745,  745,
      745,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  745,  745,  742,  742,  742,  746,  745,  745,  745,
      745,  745,  745,  745,  746,  746,  745,  746,  745,  745,
      745,  742,  745,  745,  746,  745,  746,  745,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  746,  742,  746,

      745,  745,  746,  746,  745,  746,  745,  745,  742,  745,
      745,  746,  746,  745,  746,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  746,
      742,  746,  745,  745,  746,  746,  745,  746,  745,  745,
      742,  745,  746,  746,  745,  746,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  746,  746,  746,  746,  746,

      745,  746,  746,  746,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  746,  746,  746,  746,  746,  745,  746,  746,  746,
      746,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  746,  746,  746,  746,  746,
      746,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  746,  746,  746,  746,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  746,  746,  746,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  746,  746,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  746,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,    0,  742,  742,  742,  742
    } ;

static yyconst flex_int16_t yy_nxt[1875] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   23,   24,   25,   26,   23,   27,   28,   23,   23,
       23,   29,   30,   31,   32,   23,   23,   33,   34,   23,
       23,   35,   23,   23,   23,   36,   37,   22,   23,   23,
       24,   25,   26,   23,   27,   28,   23,   23,   29,   30,
       31,   32,   23,   23,   33,   34,   23,   23,   35,   23,
       23,   23,   38,   39,   40,   39,   42,   66,   43,   66,
       66,   39,   66,   39,   42,   66,   41,   42,   66,   43,
      742,   66,  742,  653,   66,   82,  114,   75,  119,   38,

      112,   40,   45,   83,   46,   47,   48,   49,   50,  123,
       51,  606,   76,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   82,  114,   75,  119,  112,  602,  599,
       45,   83,   46,   47,   48,   49,   50,  123,   51,   76,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       66,   66,   66,   66,   66,   66,   66,  113,  589,   66,
       66,   66,  575,   66,   66,   72,  565,   66,   96,   97,
       66,   68,  520,   69,   98,   73,   77,   99,   70,   71,
       78,   74,   79,   80,  113,   84,   66,   66,   81,   66,
       66,   85,   66,   72,   88,   66,   96,   97,   68,   89,

       69,   98,   73,   77,   99,   70,   71,   78,   74,   79,
       80,   90,   84,   86,  513,   81,   91,   87,   85,   66,
      512,   88,   66,   66,  484,  122,   66,   89,  161,  100,
      481,  120,  145,  101,  124,   66,   92,   93,   90,  102,
       86,   94,  104,   91,   87,  103,  472,   91,  121,  125,
      105,  109,  122,  106,  110,  117,  161,  100,  107,  120,
      108,  101,  124,  111,   92,   93,  102,  128,  115,   94,
      104,  118,  103,  126,   91,  121,  125,  105,  116,  109,
      106,  110,  452,  117,  132,  107,  133,  108,   66,  127,
      111,   66,  134,  416,  128,   66,  115,   66,  118,   66,

       66,  126,   66,   66,   66,  116,   66,   66,   66,   66,
      130,   66,   66,  334,   66,  135,  127,   66,  136,   66,
      129,   66,   66,  395,   66,   66,  137,  131,   66,  159,
       66,   66,  140,   66,   66,  138,  141,   66,  130,  160,
       66,   66,  142,  135,   66,  162,  136,  129,  139,   66,
      143,  153,   66,  137,  131,   66,  159,  163,   66,  148,
      140,  144,  138,  141,  146,   66,  160,   66,   66,  142,
       66,   66,  162,  164,   66,  139,  165,  143,  147,  153,
       66,  150,  167,   66,  163,  151,  148,  149,  166,  144,
       66,  146,  393,   66,   66,  152,   66,   66,   66,   66,

      164,   66,  154,  165,  168,  147,  169,  170,  156,  150,
      167,  171,  175,  151,  149,  166,  172,  173,  174,  155,
      158,  176,  152,  178,  179,  157,  180,  181,  183,  154,
      182,  184,  168,  169,  177,  170,  156,  187,  185,  171,
      175,  188,  189,  172,  173,  174,  155,  158,  186,  176,
      178,  179,  157,  190,  180,  181,  183,  182,  184,  192,
      193,  177,  194,  373,   66,  187,  185,   66,  188,  189,
      191,  334,  201,   66,  195,  186,   66,   66,  212,   66,
       66,  190,   66,  132,  198,  132,  192,  193,  226,   66,
      194,  197,   66,  225,  198,  196,  132,  191,  132,  201,

       66,  230,  195,   66,  197,  212,  202,  198,   66,   66,
      204,   66,   66,   66,  237,  226,   66,  207,  199,  205,
      235,  225,   66,  196,   66,   66,  203,   66,   66,  230,
      206,   66,  200,  202,  208,  209,   95,   66,  204,   66,
       66,  237,   66,  267,  207,  198,  199,  205,   66,  210,
       66,   66,   66,   66,  203,   66,   63,  213,  206,  200,
      231,   95,  208,  209,  211,   66,  214,   66,   66,   66,
       66,   66,   66,  219,   66,  232,  210,   66,  215,  233,
       66,  238,  218,   66,  217,  213,   66,  221,  231,  227,
       66,  211,  216,   66,  214,   66,  234,  220,   66,   66,

      219,  236,   66,  232,  228,  229,  215,  233,  238,  224,
      218,  239,  217,  222,  240,  221,  223,  227,  241,  216,
      242,  243,  244,  245,  234,  220,  246,  247,  248,  236,
      249,  228,  229,  250,  251,  252,  253,  224,  254,  239,
      222,  255,  240,  256,  223,  257,  241,  242,  243,  258,
      244,  245,  259,  246,  247,  260,  248,  261,  249,  264,
      268,  250,  251,  252,  253,   66,  254,  262,   66,  255,
      256,  263,  257,   66,  269,  270,   66,  258,  281,  259,
       65,  266,   64,  260,   63,  261,  264,  268,   66,   66,
       66,   66,   66,   66,   66,  262,   41,   66,  742,  263,

      294,  269,  270,  271,  742,  742,  281,  265,  273,  266,
       66,  272,   66,   66,   66,   66,  278,   66,   66,   66,
      742,   66,   66,  274,  275,   66,   66,   66,  294,   66,
       66,  271,  280,  285,  265,  277,  273,   66,  272,   66,
       66,  276,   66,   66,   66,  292,   66,   66,  282,  283,
      274,  284,  275,  742,  293,   66,  279,  286,   66,  295,
      280,   66,  277,   66,   66,  287,   66,   66,  276,  288,
       66,   66,  292,  296,   66,  282,  283,   66,  297,  284,
       66,  293,  298,  279,  290,  286,  295,  299,  742,  300,
      289,  301,  287,  302,  303,  291,  309,  288,  304,  305,

      306,  296,  307,  308,  310,  297,  311,  312,  316,  298,
      313,  290,  314,  315,  742,  299,  300,  289,  319,  301,
      302,  303,  320,  291,  309,  304,  305,  306,  321,  307,
      308,  310,  322,  311,  323,  312,  316,  313,  324,  314,
      315,  317,  318,  325,  328,  319,  326,  327,  329,  330,
      320,  331,   66,  335,   66,   66,  321,   66,  336,  742,
      322,  323,  337,  742,   66,  742,  324,   66,  317,  318,
      742,  325,  328,  326,  327,  329,  330,  333,  339,  331,
      332,  335,   66,  742,  742,   66,  336,   66,   66,  337,
       66,   66,  338,   66,   66,   66,   66,   66,   66,  345,

       66,  348,  346,   66,  333,   66,  339,  332,   66,   66,
      340,  341,   66,  352,   66,  342,  344,   66,   66,  347,
      338,   66,  343,  349,  742,  742,   66,  345,  348,   66,
      346,  355,  350,  357,   66,   66,   66,  340,   66,  341,
      359,  352,  342,  344,  361,  351,  364,  347,  360,  343,
      366,  349,   66,  353,  365,   66,   66,  367,  358,   66,
      350,  362,  368,  742,  369,  370,  354,  359,  371,  372,
      375,  361,  351,  364,  356,  376,  360,  366,  363,  374,
      353,  377,  365,  378,  367,  358,  379,  380,  381,  362,
      368,  369,  370,  382,  354,  383,  371,  372,  375,  384,

      385,  387,  356,  376,  386,  363,  374,  388,  389,  377,
      390,  378,  391,  392,  379,  380,  381,  394,  396,  742,
      397,  382,  383,  399,  398,  400,  384,   66,  385,  387,
       66,  386,  742,   66,  388,  389,  403,  742,  390,  391,
      392,  404,   66,  742,  394,   66,  396,  397,   66,  406,
      399,   66,  400,   66,   66,   66,   66,   66,   66,   66,
       66,  409,   66,   66,  403,  415,   66,  742,  404,   66,
      401,   66,   66,  742,   66,   66,  406,   66,  402,   66,
       66,   66,   66,  412,   66,  417,   66,   66,  409,   66,
       66,  418,  415,  419,  405,  410,  420,  401,  421,  427,

      413,  411,  422,  423,  426,  402,  407,  408,  414,  424,
      428,  412,  417,  429,  742,  430,  425,  431,  432,  418,
      419,  405,  433,  410,  420,  421,  427,  413,  411,  434,
      422,  423,  426,  407,  408,  414,  424,  428,  435,  436,
      437,  429,  430,  425,  431,  432,  439,  742,  440,  441,
      433,  442,  443,  742,  444,  445,  434,  446,   66,  447,
      448,   66,  449,  450,  451,  435,  742,  436,  438,  455,
       66,  456,  453,   66,  439,  440,  458,  441,  461,  442,
      443,  444,  466,  445,   66,  446,  447,   66,  448,  449,
      450,  451,  463,  454,   66,  438,  455,   66,  456,   66,

      453,  464,   66,   66,  458,  461,   66,  462,  457,   66,
      466,   66,   66,  459,   66,  467,  470,  460,  475,  463,
      454,  468,  469,  471,  473,  465,  742,  474,  464,  476,
      742,  477,  478,  479,  462,  480,  457,  482,  483,  485,
      487,  459,  486,  467,  470,  460,  475,  488,  468,  469,
      471,  473,  489,  465,  474,  490,  491,  476,  477,  478,
      492,  479,  480,  493,  482,  494,  483,  485,  487,  486,
      495,  496,  742,  497,   66,  488,  498,   66,   66,  489,
      499,   66,  490,   66,  491,  500,   66,  492,   66,  502,
      493,   66,  494,   66,   66,  504,   66,   66,  495,  496,

      497,  505,  503,  506,  498,   66,  501,  511,  499,  507,
      508,  509,  500,  510,  514,  515,  502,  516,  742,  517,
      518,  521,  504,  519,  522,  523,  524,  525,  505,  526,
      506,  527,  528,  529,  501,  511,  507,  508,  509,  530,
      510,  514,  531,  515,  532,  516,  517,  533,  518,  521,
      519,  522,  523,  524,  534,  525,  535,  526,  536,  527,
      528,  529,   66,  538,  541,   66,  542,  530,  543,  531,
      544,  532,  539,  540,  533,  545,  537,  742,  546,  547,
      548,  534,  549,  535,  550,  551,  536,  552,  553,  558,
      538,  554,  541,  542,  555,  556,  543,  544,  557,  559,

      539,  540,  545,  560,  537,  546,  547,  561,  548,  562,
      549,  550,  563,  551,  564,  552,  553,  558,  554,  566,
      567,  555,  556,  568,  569,  557,  559,   66,  570,  571,
       66,  560,  572,  573,  574,  561,  562,  576,  577,  579,
      563,  564,  578,  580,  742,  581,  582,  566,  567,  583,
      586,  568,  569,  584,  585,  587,  570,  571,  588,  572,
      573,  574,  590,  591,  592,  576,  577,  579,  593,  578,
      594,  580,  581,  595,  582,  596,  597,  583,  586,  598,
      584,  585,  587,  600,  601,  588,  603,  742,  604,  590,
      591,  605,  592,  607,  608,  593,  609,  610,  594,  611,

      612,  595,  596,  613,  597,  614,  598,  615,  616,  742,
      617,  600,  601,  618,  603,  604,  619,  742,  620,  605,
      607,  621,  608,  622,  609,  610,  611,  612,  623,  626,
      613,  624,  614,  625,  615,  627,  616,  617,  628,  629,
      618,  630,  742,  631,  619,  620,  632,  633,  634,  621,
      635,  622,  636,  742,  637,  638,  623,  626,  624,  639,
      625,  640,  627,  641,  645,  628,  642,  629,  643,  630,
      631,  644,  646,  632,  633,  647,  634,  635,  648,  649,
      636,  637,  638,  650,  651,  652,  654,  639,  655,  640,
      656,  641,  645,  642,  657,  643,  658,  659,  644,  646,

      660,  663,  647,  661,  662,  648,  649,  664,  665,  666,
      650,  667,  651,  652,  654,  668,  655,  669,  656,  670,
      671,  673,  657,  672,  658,  659,  674,  675,  660,  663,
      661,  662,  676,  677,  664,  665,  678,  666,  667,  679,
      680,  681,  668,  682,  669,  683,  685,  670,  671,  673,
      672,  684,  686,  674,  675,  687,  742,  688,  689,  676,
      690,  677,  691,  692,  678,  693,  679,  694,  680,  681,
      682,  695,  696,  683,  685,  697,  698,  699,  684,  686,
      700,  701,  703,  687,  688,  702,  689,  690,  704,  691,
      692,  705,  706,  693,  694,  707,  708,  709,  695,  696,

      710,  713,  697,  698,  699,  711,  712,  700,  714,  701,
      703,  715,  702,  716,  717,  718,  704,  719,  705,  720,
      706,  721,  722,  707,  708,  709,  723,  724,  710,  713,
      725,  726,  711,  712,  727,  728,  714,  729,  730,  715,
      716,  717,  731,  718,  732,  719,  720,  733,  721,  722,
      734,  735,  736,  723,  737,  724,  738,  725,  726,  739,
      740,  741,  727,  728,  729,  730,  742,  742,  742,  731,
      742,  732,  742,  742,  733,  742,  742,  734,  735,  736,
      742,  737,  742,  738,  742,  742,  739,  740,  741,   44,
       44,   62,   62,   62,   62,   67,  742,   67,   66,  742,

       66,    3,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742
    } ;

static yyconst flex_int16_t yy_chk[1875] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    5,    7,    5,   15,   23,   15,   25,
       23,   39,   25,   39,   41,   29,   41,   43,   29,   43,
       44,   67,   44,  635,   67,   29,   52,   25,   55,    2,

       50,    7,   16,   29,   16,   16,   16,   16,   16,   58,
       16,  581,   25,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   29,   52,   25,   55,   50,  577,  573,
       16,   29,   16,   16,   16,   16,   16,   58,   16,   25,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       22,   24,   26,   22,   24,   26,   27,   51,  561,   27,
       28,   30,  545,   28,   30,   24,  531,   32,   45,   45,
       32,   22,  483,   22,   46,   24,   26,   46,   22,   22,
       27,   24,   28,   28,   51,   30,   31,   33,   28,   31,
       33,   30,   34,   24,   32,   34,   45,   45,   22,   33,

       22,   46,   24,   26,   46,   22,   22,   27,   24,   28,
       28,   33,   30,   31,  475,   28,   34,   31,   30,   35,
      474,   32,   35,   38,  436,   57,   38,   33,   98,   47,
      432,   56,   81,   47,   59,   81,   35,   35,   33,   47,
       31,   38,   48,   34,   31,   47,  422,   38,   56,   59,
       48,   49,   57,   48,   49,   54,   98,   47,   48,   56,
       48,   47,   59,   49,   35,   35,   47,   61,   53,   38,
       48,   54,   47,   60,   38,   56,   59,   48,   53,   49,
       48,   49,  400,   54,   71,   48,   71,   48,   68,   60,
       49,   68,   71,  359,   61,   71,   53,   69,   54,   70,

       69,   60,   70,   72,   73,   53,   72,   73,   74,   77,
       69,   74,   77,  334,   76,   72,   60,   76,   72,   75,
       68,   78,   75,  328,   78,   79,   73,   70,   79,   96,
       84,   82,   76,   84,   82,   74,   77,   86,   69,   97,
       86,   89,   78,   72,   89,   99,   72,   68,   75,   80,
       79,   89,   80,   73,   70,   83,   96,  100,   83,   84,
       76,   80,   74,   77,   82,   85,   97,   87,   85,   78,
       87,   88,   99,  101,   88,   75,  102,   79,   83,   89,
       90,   87,  104,   90,  100,   88,   84,   85,  103,   80,
       91,   82,  326,   91,   92,   88,   93,   92,   94,   93,

      101,   94,   90,  102,  105,   83,  106,  107,   92,   87,
      104,  108,  112,   88,   85,  103,  109,  110,  111,   91,
       94,  113,   88,  114,  115,   93,  116,  117,  119,   90,
      118,  120,  105,  106,  113,  107,   92,  122,  121,  108,
      112,  123,  124,  109,  110,  111,   91,   94,  121,  113,
      114,  115,   93,  125,  116,  117,  119,  118,  120,  126,
      127,  113,  128,  306,  129,  122,  121,  129,  123,  124,
      125,  267,  134,  130,  129,  121,  130,  131,  145,  135,
      131,  125,  135,  132,  197,  132,  126,  127,  161,  140,
      128,  132,  140,  159,  132,  131,  133,  125,  133,  134,

      137,  163,  129,  137,  133,  145,  135,  133,  136,  138,
      137,  136,  138,  139,  170,  161,  139,  140,  133,  138,
      168,  159,  142,  131,  141,  142,  136,  141,  143,  163,
      139,  143,  133,  135,  141,  142,   95,  144,  137,  146,
      144,  170,  146,  198,  140,  198,  133,  138,  147,  143,
      148,  147,  153,  148,  136,  153,   62,  146,  139,  133,
      164,   42,  141,  142,  144,  150,  147,  149,  150,  151,
      149,  152,  151,  153,  152,  165,  143,  155,  149,  166,
      155,  171,  152,  154,  151,  146,  154,  155,  164,  162,
      156,  144,  150,  156,  147,  158,  167,  154,  158,  157,

      153,  169,  157,  165,  162,  162,  149,  166,  171,  158,
      152,  172,  151,  156,  173,  155,  157,  162,  174,  150,
      175,  176,  177,  178,  167,  154,  179,  180,  181,  169,
      182,  162,  162,  183,  184,  185,  185,  158,  185,  172,
      156,  186,  173,  187,  157,  188,  174,  175,  176,  189,
      177,  178,  190,  179,  180,  191,  181,  192,  182,  194,
      199,  183,  184,  185,  185,  196,  185,  193,  196,  186,
      187,  193,  188,  195,  200,  201,  195,  189,  212,  190,
       20,  196,   18,  191,   17,  192,  194,  199,  203,  202,
      204,  203,  202,  204,  205,  193,   12,  205,    3,  193,

      227,  200,  201,  202,    0,    0,  212,  195,  204,  196,
      206,  203,  207,  206,  208,  207,  209,  208,  211,  209,
        0,  211,  210,  205,  206,  210,  213,  214,  227,  213,
      214,  202,  211,  216,  195,  208,  204,  215,  203,  216,
      215,  207,  216,  217,  218,  225,  217,  218,  213,  214,
      205,  215,  206,    0,  226,  219,  210,  217,  219,  228,
      211,  220,  208,  221,  220,  218,  221,  222,  207,  219,
      222,  224,  225,  229,  224,  213,  214,  223,  230,  215,
      223,  226,  231,  210,  221,  217,  228,  232,    0,  233,
      220,  234,  218,  235,  236,  223,  243,  219,  237,  238,

      239,  229,  240,  241,  244,  230,  245,  246,  250,  231,
      247,  221,  248,  249,    0,  232,  233,  220,  252,  234,
      235,  236,  253,  223,  243,  237,  238,  239,  254,  240,
      241,  244,  255,  245,  256,  246,  250,  247,  257,  248,
      249,  251,  251,  258,  261,  252,  259,  260,  262,  263,
      253,  264,  265,  268,  266,  265,  254,  266,  269,    0,
      255,  256,  270,    0,  272,    0,  257,  272,  251,  251,
        0,  258,  261,  259,  260,  262,  263,  266,  272,  264,
      265,  268,  271,    0,    0,  271,  269,  273,  275,  270,
      273,  275,  271,  274,  276,  277,  274,  276,  277,  278,

      279,  281,  278,  279,  266,  282,  272,  265,  282,  280,
      273,  274,  280,  285,  283,  275,  277,  283,  284,  280,
      271,  284,  276,  282,    0,    0,  286,  278,  281,  286,
      278,  288,  283,  290,  288,  291,  290,  273,  291,  274,
      292,  285,  275,  277,  294,  284,  296,  280,  293,  276,
      298,  282,  287,  286,  297,  287,  289,  299,  291,  289,
      283,  295,  300,    0,  301,  302,  287,  292,  303,  305,
      308,  294,  284,  296,  289,  309,  293,  298,  295,  307,
      286,  310,  297,  311,  299,  291,  312,  313,  314,  295,
      300,  301,  302,  315,  287,  316,  303,  305,  308,  317,

      318,  320,  289,  309,  319,  295,  307,  321,  322,  310,
      323,  311,  324,  325,  312,  313,  314,  327,  330,    0,
      331,  315,  316,  336,  332,  337,  317,  332,  318,  320,
      333,  319,    0,  333,  321,  322,  345,    0,  323,  324,
      325,  346,  338,    0,  327,  338,  330,  331,  339,  348,
      336,  339,  337,  340,  341,  342,  340,  341,  342,  343,
      344,  352,  343,  344,  345,  357,  347,    0,  346,  347,
      338,  349,  350,    0,  349,  350,  348,  351,  341,  354,
      351,  353,  354,  355,  353,  360,  356,  358,  352,  356,
      358,  361,  357,  362,  347,  353,  363,  338,  364,  371,

      355,  354,  365,  366,  370,  341,  349,  350,  356,  368,
      372,  355,  360,  373,    0,  374,  368,  375,  376,  361,
      362,  347,  377,  353,  363,  364,  371,  355,  354,  380,
      365,  366,  370,  349,  350,  356,  368,  372,  381,  382,
      383,  373,  374,  368,  375,  376,  384,    0,  385,  386,
      377,  387,  388,    0,  389,  390,  380,  391,  401,  393,
      395,  401,  397,  398,  399,  381,    0,  382,  383,  403,
      402,  404,  401,  402,  384,  385,  406,  386,  409,  387,
      388,  389,  415,  390,  410,  391,  393,  410,  395,  397,
      398,  399,  412,  402,  405,  383,  403,  405,  404,  407,

      401,  413,  407,  408,  406,  409,  408,  410,  405,  411,
      415,  414,  411,  407,  414,  416,  420,  408,  425,  412,
      402,  418,  419,  421,  423,  414,    0,  424,  413,  426,
        0,  427,  428,  429,  410,  431,  405,  433,  435,  437,
      440,  407,  439,  416,  420,  408,  425,  441,  418,  419,
      421,  423,  442,  414,  424,  443,  445,  426,  427,  428,
      446,  429,  431,  447,  433,  448,  435,  437,  440,  439,
      449,  450,    0,  452,  453,  441,  455,  453,  454,  442,
      456,  454,  443,  457,  445,  458,  457,  446,  459,  463,
      447,  459,  448,  460,  462,  466,  460,  462,  449,  450,

      452,  467,  465,  468,  455,  465,  462,  473,  456,  469,
      470,  471,  458,  472,  476,  478,  463,  479,    0,  480,
      481,  484,  466,  482,  485,  487,  488,  489,  467,  490,
      468,  491,  492,  493,  462,  473,  469,  470,  471,  494,
      472,  476,  495,  478,  496,  479,  480,  497,  481,  484,
      482,  485,  487,  488,  498,  489,  499,  490,  500,  491,
      492,  493,  501,  502,  504,  501,  505,  494,  506,  495,
      508,  496,  503,  503,  497,  509,  501,    0,  510,  511,
      512,  498,  513,  499,  514,  515,  500,  516,  518,  524,
      502,  520,  504,  505,  521,  522,  506,  508,  523,  525,

      503,  503,  509,  526,  501,  510,  511,  527,  512,  528,
      513,  514,  529,  515,  530,  516,  518,  524,  520,  532,
      533,  521,  522,  535,  536,  523,  525,  537,  539,  540,
      537,  526,  542,  543,  544,  527,  528,  546,  547,  549,
      529,  530,  548,  550,    0,  551,  552,  532,  533,  553,
      556,  535,  536,  554,  555,  558,  539,  540,  560,  542,
      543,  544,  562,  563,  564,  546,  547,  549,  565,  548,
      566,  550,  551,  567,  552,  570,  571,  553,  556,  572,
      554,  555,  558,  575,  576,  560,  578,    0,  579,  562,
      563,  580,  564,  582,  583,  565,  584,  585,  566,  586,

      587,  567,  570,  589,  571,  590,  572,  591,  592,    0,
      593,  575,  576,  594,  578,  579,  596,    0,  597,  580,
      582,  599,  583,  600,  584,  585,  586,  587,  601,  604,
      589,  602,  590,  603,  591,  605,  592,  593,  606,  608,
      594,  609,    0,  610,  596,  597,  611,  613,  615,  599,
      616,  600,  617,    0,  619,  620,  601,  604,  602,  621,
      603,  622,  605,  623,  627,  606,  624,  608,  625,  609,
      610,  626,  628,  611,  613,  629,  615,  616,  630,  631,
      617,  619,  620,  632,  633,  634,  636,  621,  638,  622,
      639,  623,  627,  624,  640,  625,  641,  642,  626,  628,

      643,  646,  629,  644,  645,  630,  631,  648,  649,  651,
      632,  652,  633,  634,  636,  653,  638,  654,  639,  656,
      657,  659,  640,  658,  641,  642,  660,  661,  643,  646,
      644,  645,  662,  663,  648,  649,  664,  651,  652,  666,
      667,  668,  653,  669,  654,  670,  672,  656,  657,  659,
      658,  671,  673,  660,  661,  674,    0,  677,  678,  662,
      679,  663,  680,  681,  664,  682,  666,  683,  667,  668,
      669,  684,  685,  670,  672,  686,  687,  688,  671,  673,
      689,  690,  692,  674,  677,  691,  678,  679,  693,  680,
      681,  694,  697,  682,  683,  698,  699,  700,  684,  685,

      701,  706,  686,  687,  688,  703,  704,  689,  707,  690,
      692,  708,  691,  709,  710,  711,  693,  712,  694,  713,
      697,  714,  715,  698,  699,  700,  716,  717,  701,  706,
      718,  719,  703,  704,  720,  722,  707,  723,  724,  708,
      709,  710,  725,  711,  726,  712,  713,  727,  714,  715,
      728,  730,  732,  716,  733,  717,  734,  718,  719,  735,
      737,  738,  720,  722,  723,  724,    0,    0,    0,  725,
        0,  726,    0,    0,  727,    0,    0,  728,  730,  732,
        0,  733,    0,  734,    0,    0,  735,  737,  738,  743,
      743,  744,  744,  744,  744,  745,    0,  745,  746,    0,

      746,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pddl+.lex"
#line 2 "pddl+.lex"

#include <string>

#include <fstream>
  using std::cin;
  using std::cout;
  using std::cerr;
  using std::istream;
  using namespace VAL;
extern "C" int yywrap();

#line 1086 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 27 "pddl+.lex"

#line 1196 "lex.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 743 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1802 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 28 "pddl+.lex"
{return OPEN_BRAC;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 29 "pddl+.lex"
{return CLOSE_BRAC;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 30 "pddl+.lex"
{return OPEN_SQ;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 31 "pddl+.lex"
{return CLOSE_SQ;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 32 "pddl+.lex"
{return REQS;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 33 "pddl+.lex"
{return EQUALITY;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 34 "pddl+.lex"
{return STRIPS;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 35 "pddl+.lex"
{return ADL;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 36 "pddl+.lex"
{return TYPING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 37 "pddl+.lex"
{return DISJUNCTIVE_PRECONDS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 38 "pddl+.lex"
{return EXT_PRECS;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 39 "pddl+.lex"
{return UNIV_PRECS;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 40 "pddl+.lex"
{return QUANT_PRECS;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 41 "pddl+.lex"
{return COND_EFFS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 42 "pddl+.lex"
{return FLUENTS;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 43 "pddl+.lex"
{return NUMERICFLUENTS;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 44 "pddl+.lex"
{return OBJECTFLUENTS;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 45 "pddl+.lex"
{return ACTIONCOSTS;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 46 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 47 "pddl+.lex"
{return PREFERENCES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 48 "pddl+.lex"
{return CONSTRAINTS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 49 "pddl+.lex"
{return CONSTANTS;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 50 "pddl+.lex"
{return PREDS;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 51 "pddl+.lex"
{return FUNCTIONS;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 52 "pddl+.lex"
{return CLASSES;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 53 "pddl+.lex"
{return CLASS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 54 "pddl+.lex"
{return TYPES;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 55 "pddl+.lex"
{return DURATIVE_ACTIONS;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 56 "pddl+.lex"
{return DURATION_INEQUALITIES;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 57 "pddl+.lex"
{return CONTINUOUS_EFFECTS;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 58 "pddl+.lex"
{return NEGATIVE_PRECONDITIONS;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 59 "pddl+.lex"
{return DERIVED_PREDICATES;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 60 "pddl+.lex"
{return TIMED_INITIAL_LITERALS;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 61 "pddl+.lex"
{return DEFINE;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 62 "pddl+.lex"
{return PDDLDOMAIN;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 63 "pddl+.lex"
{return ACTION;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 64 "pddl+.lex"
{return PROCESS;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 65 "pddl+.lex"
{return EVENT;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 66 "pddl+.lex"
{return DURATIVE_ACTION;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 67 "pddl+.lex"
{return DERIVED;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 68 "pddl+.lex"
{return ARGS;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 69 "pddl+.lex"
{return PRE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 70 "pddl+.lex"
{return CONDITION;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 71 "pddl+.lex"
{return START_PRE;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 72 "pddl+.lex"
{return END_PRE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 73 "pddl+.lex"
{return AT_START;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 74 "pddl+.lex"
{return AT_END;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 75 "pddl+.lex"
{return OVER_ALL;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 76 "pddl+.lex"
{return EFFECTS;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 77 "pddl+.lex"
{return INITIAL_EFFECT;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 78 "pddl+.lex"
{return FINAL_EFFECT;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 79 "pddl+.lex"
{return INVARIANT;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 80 "pddl+.lex"
{return DURATION;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 81 "pddl+.lex"
{return AND;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 82 "pddl+.lex"
{return OR;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 83 "pddl+.lex"
{return EXISTS;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 84 "pddl+.lex"
{return FORALL;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 85 "pddl+.lex"
{return IMPLY;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 86 "pddl+.lex"
{return NOT;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 87 "pddl+.lex"
{return WHEN;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 88 "pddl+.lex"
{return EITHER;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 89 "pddl+.lex"
{return PROBLEM;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 90 "pddl+.lex"
{return FORDOMAIN;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 91 "pddl+.lex"
{return OBJECTS;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 92 "pddl+.lex"
{return INITIALLY;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 93 "pddl+.lex"
{return GOALS;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 94 "pddl+.lex"
{return EQ;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 95 "pddl+.lex"
{return LENGTH;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 96 "pddl+.lex"
{return SERIAL;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 97 "pddl+.lex"
{return PARALLEL;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 98 "pddl+.lex"
{return METRIC;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 99 "pddl+.lex"
{return MINIMIZE;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 100 "pddl+.lex"
{return MAXIMIZE;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 101 "pddl+.lex"
{return ISVIOLATED;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 102 "pddl+.lex"
{return HASHT;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 103 "pddl+.lex"
{return DURATION_VAR;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 104 "pddl+.lex"
{return TOTAL_TIME;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 105 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 106 "pddl+.lex"
{return NUMBER;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 107 "pddl+.lex"
{return INCREASE;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 108 "pddl+.lex"
{return DECREASE;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 109 "pddl+.lex"
{return SCALE_UP;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 110 "pddl+.lex"
{return SCALE_DOWN;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 111 "pddl+.lex"
{return ASSIGN;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 112 "pddl+.lex"
{return PREFERENCE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 113 "pddl+.lex"
{return ALWAYS;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 114 "pddl+.lex"
{return SOMETIME;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 115 "pddl+.lex"
{return WITHIN;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 116 "pddl+.lex"
{return ATMOSTONCE;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 117 "pddl+.lex"
{return SOMETIMEAFTER;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 118 "pddl+.lex"
{return SOMETIMEBEFORE;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 119 "pddl+.lex"
{return ALWAYSWITHIN;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 120 "pddl+.lex"
{return HOLDDURING;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 121 "pddl+.lex"
{return HOLDAFTER;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 122 "pddl+.lex"
{return PLUS;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 123 "pddl+.lex"
{return HYPHEN;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 124 "pddl+.lex"
{return MUL;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 125 "pddl+.lex"
{return DIV;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 126 "pddl+.lex"
{return GREATER;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 127 "pddl+.lex"
{return GREATEQ;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 128 "pddl+.lex"
{return LESS;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 129 "pddl+.lex"
{return LESSEQ;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 130 "pddl+.lex"
{return Q;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 131 "pddl+.lex"
{return COLON;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 132 "pddl+.lex"
{return DOT;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 133 "pddl+.lex"
{return MODULES;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 135 "pddl+.lex"
{unsigned int i;
           for(i = 3;i < strlen(yytext);++i)
           {
           	  if(yytext[i] != '\t' && yytext[i] != ' ') break;
           };
           yylval.fval = atof(yytext+i);
			return (AT_TIME);
          }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 145 "pddl+.lex"
{unsigned int i; 
          yylval.cp = new char[strlen(yytext)+1];
          strcpy(yylval.cp,yytext);
	  for(i = 0;i<strlen(yylval.cp);i++)
	      yylval.cp[i] = tolower(yylval.cp[i]);
	  // If symbol is registered as a function symbol,
	  // return token FUNCTION_SYMBOL else return NAME
	  //cout << yytext << " " << line_no << "\n";
	  if (current_analysis->func_tab.symbol_probe(yylval.cp) != NULL)
	      return FUNCTION_SYMBOL;
	  else
	      return NAME;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 158 "pddl+.lex"
;
	YY_BREAK
case 110:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 159 "pddl+.lex"
;
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 160 "pddl+.lex"
{line_no++;};
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 162 "pddl+.lex"
{yylval.ival = atoi(yytext);return (INTVAL);}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 163 "pddl+.lex"
{yylval.fval = atof(yytext);return (FLOATVAL);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 164 "pddl+.lex"
{printf("Illegal symbol: %s\n",yytext); exit(0); return 0;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 166 "pddl+.lex"
ECHO;
	YY_BREAK
#line 1877 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 743 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 743 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 742);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 166 "pddl+.lex"




extern "C++" {
  int yyFlexLexer::yywrap()
{
	return 1;
};
};


